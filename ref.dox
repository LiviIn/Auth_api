// module.exports = {
//     signAccessToken: (userId) => {
//         return new Promise(( resolve, reject ) => {
//             const payload ={ }
//             const secret = process.env.ACCESS_TOKEN_SECRET
//             const options = {
//                 expiresIn: "1h",
//                 audience: userId,
//             }
//             JWT.sign( payload, secret, options, (err, token) => {
//                 if(err) {
//                     console.log(err.message)
//                     // reject(err)
//                     // reject(createError.InternalServerError())
//                 }
//                 resolve(token)
//             })
//         })
//     },

//     verifyAccessToken: (req, res, next) =>{
//         if(!req.headers['authorization']){
//             return next(createError.Unauthorized())
//         }
//         const authHeader = req.headers['authorization']
//         const bearerToken = authHeader.split(' ')
//         const token = bearerToken[1]
//         JWT.verify( token, process.env.ACCESS_TOKEN_SECRET, (err, payload) =>{
//             if(err){
//                 // if (err.name === 'JsonWebTokenError'){
//                 //     return next(createError.Unauthorized())
//                 // }else {
//                 //     return next(createError.Unauthorized(err.message))
//                 // }  
//                 const message = err.name === 'JsonWebTokenError' ? 'Unauthorized' : err.message
//                 return next(createError.Unauthorized(message))
//             }
//             req.payload = payload
//             next()
//         })
//     },
//     signRefreashToken: (userId) => {
//         return new Promise(( resolve, reject ) => {
//             const payload ={ }
//             const secret = process.env.REFRESH_TOKEN_SECRET
//             const options = {
//                 expiresIn: "1y",
//                 audience: userId,
//             }
//             JWT.sign( payload, secret, options, (err, token) => {
//                 if(err) {
//                     console.log(err.message)
//                     // reject(err)
//                     reject(createError.InternalServerError())
//                 }
//                 client.SET(userId, token, 'EX', 365*24*60*60, (err, reply) =>{
//                     if(err){
//                         console.log(err.message)
//                         reject(createError.InternalServerError())
//                         return
//                     }
//                     resolve(token)
//                 })
               
//             })
//         })
//     },
//     verifyRefreshToken: (refreshToken) => {
//         return new Promise(( resolve, reject ) =>{
//             JWT.verify(
//                 refreshToken,
//                 process.env.REFRESH_TOKEN_SECRET,
//                 (err, payload) => {
//                     if(err) return reject(createError.Unauthorized())
//                     const userId = payload.aud
//                     client.GET(userId, (err, result) => {
//                         if (err) {
//                             console.log(err.message)
//                             reject(createError.InternalServerError())
//                             return
//                         }
//                         if( refreshToken === result ){
//                             return resolve(userId)
//                         }
//                         reject(createError.Unauthorized())
//                     })

//                 }
//             )
//         })
//     }
// }



// console.log(token)
  // if(!token){
  //   return res.status(401).send({
  //     auth: false, message: err.message
  //   });
  // }
  
  // // const decoded = await promisify(JWT.verify)(token, secret);
  // 
}

// module.exports = (req, res, next) => {
//     // Getting token and check of it's there
//     var token;
//     // if(authorization in req.headers){
//     token = req.headers.authorization;
//     console.log(token)
//     //   token = req.headers['x-access-token'].split(' ')[1];
//     // }
//     if(!token){
//       return res.status(401).send({
//         auth: false, message: 'No token provided.'
//       });
//     }
//     //Verification token
//    JWT.verify(token, secret, (err, decoded) =>{
//     if(err){
//       return res.status(500).send({
//         auth: false, message: err.message
//       })
//     }else{
//       req.userId = decoded._id;
//       next();
//     }
//   })
    
// }
// module.exports = (req, res, next) =>{
//     var token = req.headers.authorization;
//     console.log(token);

//     try {
//         JWT.verify(token, secret, function( err, decoded){
//             console.log(decoded)
//             if(decoded._id){
//                 next()
//             }else{
//                 throw 'Invalis user ID'
//             }
//         })
//     } catch {
//         res.status(401).json({
//             error: new Error('Invalid request!')
//         })
//     }
// }



// that is jwt helper file in the app


//writing work for authenticated
    // login: async (req, res, next) =>{
        
    //     //cal for passport authentication
    //     passport.authenticate('local', (err, user, info) => {
    //         if(err){
    //             //error from passport middleware
    //             return res.status(400).json(err);
    //         }else if(user){
    //             //registered user
    //             return res.status(200).json({'token': user.generateJwt()});
    //         }else {
    //             //unkown user or wrong password
    //             return res.status(404).json(info);
    //         }
    //     })
    //     return next()
    // }, 